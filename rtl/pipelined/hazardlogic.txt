# Data Hazard Forwarding Logic:

# Check if the source register (Rs1R) matches the destination register (RdM) in the memory stage (M) 
# AND if register write is enabled in the memory stage (RegWriteM)
# AND if the source register is not zero (Rs1E != 0)
if ((Rs1R == RdM) & RegWriteM) & (Rs1E != 0):
    # If all conditions are met, set ForwardAE to 10
    ForwardAE = 10

# Check if the source register (Rs1E) matches the destination register (RdW) in the write-back stage (W)
# AND if register write is enabled in the write-back stage (RegWriteW)
# AND if the source register is not zero (Rs1E != 0)
elif ((Rs1E == RdW) & RegWriteW) & (Rs1E != 0):
    # If all conditions are met, set ForwardAE to 01
    ForwardAE = 01

# If none of the above conditions are met, set ForwardAE to 00
else:
    ForwardAE = 00




# Data Hazard Stalls Logic (Occurs when a load hazard takes place):

# Check if there is a result from the source in the execution stage (ResultSrcE0)
# AND if either the source register 1 (Rs1D) matches the destination register in the execute stage (RdE)
# OR if the source register 2 (Rs2D) matches the destination register in the execute stage (RdE)
lwStall = ResultSrcE0 & ((Rs1D == RdE) | (Rs2D == RdE))

# Set various pipeline stage stall signals based on the load hazard condition
# If lwStall is true, set StallF, StallD, FlushE to true, indicating stalls in Fetch, Decode, and Execute stages
StallF = StallD = FlushE = lwStall
